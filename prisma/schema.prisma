// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  isStaff Boolean @default(false)

  firstname String
  lastname  String

  phone       String?
  birthdate   DateTime
  nationality String
  gender      String?
  schoolname  String?
  dietary     String?

  position String?

  createdAt DateTime @default(now())

  otherInfo String? // other info about the user

  @@map("users")
}

model Session {
  // ID of the JWT
  jti String @id @default(uuid())
  // UNIX timestamp (seconds) of issuing
  iat Int
  // UNIX timestamp (seconds) of expiry
  exp Int
  // ID of the user it is issued to
  aud Int

  // Serialized data that is NOT stored on the client
  data String

  // user User @relation(fields: [jti], references: [id], onDelete: Cascade)
}

// a single delegate as they apply
model AppliedUser {
  delegateId       Int     @id @default(autoincrement())
  userId           Int     @unique
  delegationId     Int?
  choice1committee Int
  choice1country   String
  choice2committee Int
  choice2country   String
  choice3committee Int
  choice3country   String
  experience       String
  motivation       String
  finalCommittee   String?
  finalCountry     String?
  paymentStatus    String
  shirtSize        String?
}

model ChairApplication {
  chairId          Int     @id @default(autoincrement())
  userId           Int     @unique
  delegationId     Int?
  choice1committee Int
  choice2committee Int
  choice3committee Int
  experience       String
  motivation       String
  finalCommittee   String?
  paymentStatus    String
  shirtSize        String?
}

// a "group" of people that have decided to join PLISMUN together
// usually with clubs
model Delegation {
  delegationId       Int    @id @default(autoincrement())
  // the delegation leader's user ID
  delegationLeaderId Int
  name               String
  country            String
  estimatedDelegates Int
  // this number is filled in closer to the conference
  delegates          Int?
}

model Committee {
  id          Int     @id @default(autoincrement())
  description String
  displayname String
  difficulty  String
  chair1      Int?
  chair2      Int?
  topic1      String?
  topic2      String?
  para1       String?
  para2       String?
}

// the available countries in committees
model CommitteeCountries {
  id          Int    @id @default(autoincrement())
  committeeId Int
  country     String
  difficulty  String
  userId      Int?
}

// the actual committee members that are in different committees
model CommitteeMember {
  committeeId Int
  role        String // "chair" or "member"
  // the user that is the delegate in this committee for this country
  userId      Int    @unique
  country     String
}
